"""import pandas as pd
import mglearn
import numpy as np
from sklearn.datasets import load_iris

# Load Iris dataset
iris = load_iris()
# Create a DataFrame
iris_dataframe = pd.DataFrame(data=iris.data, columns=iris.feature_names)


from sklearn.datasets import load_iris
iris_dataset = load_iris()

print("iris_datasets의 키: \n{}".format(iris_dataset.keys()))

print(iris_dataset['DESCR'][:193] + "\n...")

"""
"""
Notes
----
Data Set Characteristics:
:Number of Instances: 150 (50 in each of three classes)
:Number of Attribute: 4 numeric, predictive att
"""
"""
print("타깃의 이름: {}".format(iris_dataset['target_names']))

print("특성의 이름: \n{}".format(iris_dataset['feature_names']))

print("data의 타입: {}".format(type(iris_dataset['data'])))

print("data의 크기: {}".format(iris_dataset['data'].shape))

print("data의 처음 다섯 행:\n{}".format(iris_dataset['data'][:5]))

print("target의 타입: {}".format(type(iris_dataset['target'])))

print("타깃:\n{}".format(iris_dataset['target']))

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
iris_dataset['data'], iris_dataset['target'], random_state=0)

print("X_train 크기: {}".format(X_train.shape))
print("y_train 크기: {}".format(y_train.shape))

print("X_test 크기: {}".format(X_test.shape))
print("y_test 크기: {}".format(y_test.shape))

# X_train 데이터를 사용해서 데이터 프레임을 만듭니다.
# 열의 이름은 iris_dataset.feature_names에 있는 문자열을 사용합니다.
iris_dataframe = pd.DataFrame(X_train, columns=iris_dataframe.feature_names)
#데이터프레임을 사용해 y_train에 따라 색으로 구분된 산점도 행렬을 만듭니다.
pd.plotting.scatter_matrix(iris_dataframe, c=y_train, figsize=(15, 15), marker='o', hist_kwds={'bins': 20}, s=60, alpha=.8, cmap=mglearn.cm3)

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=1)

knn.fit(X_train, y_train)

X_new = np.array([[5,  29, 1, 0.2]])
print("X_new.shape: {}".format(X_new.shape))

prediction = knn.predict(X_new)
print("예측: {}".format(prediction))
print("예측한 타깃의 이름: {}".format(
iris_dataset['target_names'][prediction]))

y_pred = knn.predict(X_test)
print("테스트 세트에 대한 예측값:\n {}".format(y_pred))

print("테스트 세트의 정확도: {:.2f}".format(np.mean(y_pred == y_test)))

print("테스트 세트의 정확도: {:.2f}".format(knn.score(X_test, y_test)))
"""

# 패키지 설치 (터미널에서 실행)
# pip install scikit-learn mglearn pandas

# 데이터 만들기
from sklearn.datasets import load_iris
import pandas as pd
import numpy as np
import mglearn
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
import matplotlib.pyplot as plt

iris_dataset = load_iris()

# 데이터 분할
X_train, X_test, y_train, y_test = train_test_split(
    iris_dataset['data'], iris_dataset['target'], random_state=0)

# 데이터프레임 만들기
iris_dataframe = pd.DataFrame(X_train, columns=iris_dataset.feature_names)

# 산점도 행렬 그리기
pd.plotting.scatter_matrix(
    iris_dataframe, 
    c=y_train, 
    figsize=(15, 15), 
    marker='o',
    hist_kwds={'bins': 20}, 
    s=60, 
    alpha=.8, 
    cmap=mglearn.cm3,
    diagonal='kde'
)

# KNN 알고리즘
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(X_train, y_train)

# 예측
X_new = np.array([[5, 2.9, 1, 0.2]])
prediction = knn.predict(X_new)

print("예측: {}".format(prediction))
print("예측한 타깃의 이름: {}".format(iris_dataset['target_names'][prediction]))

# 모델 평가
y_pred = knn.predict(X_test)
accuracy = knn.score(X_test, y_test)

print("테스트 세트에 대한 예측값:\n {}".format(y_pred))
print("테스트 세트의 정확도: {:.2f}".format(accuracy))